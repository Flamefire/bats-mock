#!/usr/bin/env bash
set -e

status=0
program="${0##*/}"
PROGRAM="$(echo "$program" | tr a-z- A-Z_)"

_STUB_PLAN="${PROGRAM}_STUB_PLAN"
_STUB_RUN="${PROGRAM}_STUB_RUN"
_STUB_INDEX="${PROGRAM}_STUB_INDEX"
_STUB_RESULT="${PROGRAM}_STUB_RESULT"
_STUB_END="${PROGRAM}_STUB_END"
_STUB_DEBUG="${PROGRAM}_STUB_DEBUG"
_STUB_ERRORS="${PROGRAM}_STUB_ERRORS"

if [ -n "${!_STUB_DEBUG}" ]; then
  echo "$program" "$@" >&${!_STUB_DEBUG}
fi

[ -e "${!_STUB_PLAN}" ] || exit 1
[ -n "${!_STUB_RUN}" ] || eval "${_STUB_RUN}"="${BATS_MOCK_TMPDIR}/${program}-stub-run"


# Initialize or load the stub run information.
eval "${_STUB_INDEX}"=1
eval "${_STUB_RESULT}"=0
[ ! -e "${!_STUB_RUN}" ] || source "${!_STUB_RUN}"

function _stub_split_pattern_line {
  # Split the line into an array of arguments to
  # match and a command to run to produce output.
  command=" $1"
  if [ "$command" != "${command/ : }" ]; then
    patterns="${command%% : *}"
    command="${command#* : }"
  else
    patterns=""
    command="$1"
  fi
}

# Loop over each line in the plan.
index=0
match_found=0
while IFS= read -r line; do
  index=$((index + 1))

  if [ -z "${!_STUB_END}" ] && [ $index -eq "${!_STUB_INDEX}" ]; then
    # We found the plan line we're interested in.
    # Start off by assuming success.
    match_found=1

    _stub_split_pattern_line "$line"

    # Split patterns as good as possible. Will fail
    # for weird stuff like "`embedded command`"
    # In the future, use a sed script to split while
    # respecting quoting.
    set -f
    eval "patterns=($patterns)"
    set +f
    arguments=("$@")

    # Match the expected argument patterns to actual
    # arguments.
    for (( i=0; i<${#patterns[@]}; i++ )); do
      pattern="${patterns[$i]}"
      argument="${arguments[$i]}"

      case "$argument" in
        $pattern ) ;;
        "$pattern" ) ;;
        * ) match_found=0 ;;
      esac
    done

    break
  fi
done < "${!_STUB_PLAN}"


if [ -n "${!_STUB_END}" ]; then
  # Clean up the run file.
  rm -f "${!_STUB_RUN}"

  # If the number of lines in the plan is larger than
  # the requested index, we failed.
  if [ $index -ge "${!_STUB_INDEX}" ]; then
    eval "${_STUB_RESULT}"=1
    while IFS= read -r line; do
      index=$((index + 1))

      if [ $index -ge "${!_STUB_INDEX}" ]; then
        _stub_split_pattern_line "$line"
        echo "Missing call: \`$program $patterns\`"
      fi
    done < "${!_STUB_PLAN}"
  fi
  if [ -f "${!_STUB_ERRORS}" ]; then
    while IFS= read -r line; do
      echo "Unexpected call: \`$program $line\`"
    done < "${!_STUB_ERRORS}"
    rm "${!_STUB_ERRORS}"
  fi

  # Return the result.
  exit "${!_STUB_RESULT}"

else
  # If the line was found, execute command in a subshell
  # else record error
  if [ $match_found -eq 1 ]; then
    set +e
    ( eval "$command" )
    status="$?"
    set -e
  else
    eval "${_STUB_RESULT}"=1
    printf '%s\n' "$*" >> "${!_STUB_ERRORS}"
  fi

  # Write out the run information.
  { echo "${_STUB_INDEX}=$((${!_STUB_INDEX} + 1))"
    echo "${_STUB_RESULT}=${!_STUB_RESULT}"
  } > "${!_STUB_RUN}"

  exit "$status"

fi
